/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package stuNeimayer;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import helperCards.Card;

import helperCards.MultiCard;
import helpers.Utility;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

/**
 *
 * @author klaydejr
 */
public class NeimayerPanel extends javax.swing.JPanel implements MouseListener, MouseMotionListener  {

    private Font myFont;
    
    private MultiCard neimayerMultiCard;
    private Card neiCardData1,neiCardData2;
    private NeiCard neimayerCard,neimayerCard2;
    private Integer neimayerCorrectGuesses;
    private Boolean neiCheatDetect,neiCheatDetect2,neiCheatDetect3,neiDragging,neiHigherChosen,neiLowerChosen,neiWin; 
    private NeimayerCardBox higherBox,lowerBox;
    /**
     * Creates new form MyPanel_1
     */
    public NeimayerPanel() {
        initComponents();
        addMouseListener(this);
        addMouseMotionListener(this);
        
    myFont = new Font("Serif", Font.BOLD, 11);
    neimayerCard = new NeiCard();
    neimayerCard2 = new NeiCard();
    higherBox = new NeimayerCardBox(20,20,100,150,Color.GREEN);
    lowerBox = new NeimayerCardBox(275,20,100,150,Color.RED);
    //neiCardData1 = new Card();
   // neiCardData2 = new Card();
        
        
    neimayerMultiCard = new MultiCard();
    int randomCardIndex = Utility.getRandomFromTo(0, 51);
    int randomCardIndex2 = Utility.getRandomFromTo(0, 51);
    neiCardData1 = neimayerMultiCard.getCardAtIndex(randomCardIndex);
    neiCardData2 = neimayerMultiCard.getCardAtIndex(randomCardIndex2);
    neimayerCard = new NeiCard(neiCardData1,getImage("src/cards/"+"faceDown"+".gif"),this);
    neimayerCard2 = new NeiCard(neiCardData2,getImage("src/cards/"+"faceDown"+".gif"),this);
    neimayerCard.setOver(185);
    neimayerCard.setDown(170);
    neimayerCard2.setOver(185);
    neimayerCard2.setDown(50);
    neimayerCard2.setFaceDown(true);
    neiCheatDetect = false;
    neiCheatDetect2 = false;
    neiCheatDetect3 = true;
    neimayerCorrectGuesses = 0;
    correctGuessLabel.setText("Correct Guesses = "+neimayerCorrectGuesses);
    neiHigherChosen = false;
    neiLowerChosen = false;
    neiWin = false;
    }
    
     private BufferedImage getImage(String fileString)
    {
        BufferedImage image = null;
        
        try { 
            image = ImageIO.read(new File(fileString));
//            System.out.println("image "+fileString+"       ok");
        } catch (IOException ex) 
        {
            System.out.println("*********************** error when trying to load image: "+fileString);
            //System.out.println(ex);
        }
        return image;
    }
    
    @Override
    public void paintComponent(Graphics g) 
    {
        super.paintComponent(g);
        
    g.setColor(new Color(255,200,200));
    g.fillRect(0, 0, 1000, 1000);
    g.setFont(myFont);
        
    g.setColor(Color.BLACK);
    g.drawString("Higher Or Lower", 10, 10);
        
    
   
   // neimayerCard2.drawMe(g);
    
    higherBox.drawMe(g);
    lowerBox.drawMe(g);
    neimayerCard2.drawMe(g);
    neimayerCard.drawMe(g);
    
    if (neiWin==true){
        g.setColor(Color.BLUE);
        g.drawString("Congratulations, You Win!", 70, 120);
    }
   }
    
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        confirmButton = new javax.swing.JButton();
        rulesButton = new javax.swing.JButton();
        correctGuessLabel = new javax.swing.JLabel();
        getResultsButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();

        confirmButton.setText("Confirm Choice");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        rulesButton.setText("Rules");
        rulesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rulesButtonActionPerformed(evt);
            }
        });

        correctGuessLabel.setText("Correct Guesses = 0");

        getResultsButton.setText("Get Results");
        getResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getResultsButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(rulesButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addComponent(confirmButton)
                .addGap(33, 33, 33)
                .addComponent(correctGuessLabel)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(getResultsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(resetButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(224, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getResultsButton)
                    .addComponent(resetButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmButton)
                    .addComponent(rulesButton)
                    .addComponent(correctGuessLabel)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rulesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rulesButtonActionPerformed
        // TODO add your handling code here:
    System.out.println("The rules of the game are as Follows");
    System.out.println("You Drag around the face up card ang guess if it his higher or lower than the FaceDown Card");
    System.out.println("If you Believe your given card is Higher than the facedown card, move it into the green box");
    System.out.println("If you think your card is lower, move it into the Red box");
    System.out.println("once you have made up your mind, press the Confirm Choice button to reveal the face down card, at this point you cannot move the card");
    System.out.println("press the getresults buttor to process wether your guess was correct or not");
    System.out.println("if your guess was correct, a point will be added");
    System.out.println("if your guess was incorrect, your points will be set to 0");
    System.out.println("if both cards have the same value, your score will remain the same");
    System.out.println("your score is updated when you press the reset button after playing a round");
    System.out.println("if you press the reset button repeatedly your score will reset to 0, so you have to win games in a row to increase your score");
    System.out.println("You win the game by guessing correctly 3 times in a row, it will register your Completion once you press the reset button with 3 total score");
    System.out.println("Every Card has a Value, for nuber cards the value is thier numbers but for the Ace and Faces the Values are as Follows");
    System.out.println("Aces have a Value of 1, making them the Lowest Card");
    System.out.println("Jacks have a Value of 11");
    System.out.println("Queens have a Value of 12");
    System.out.println("Kings have a Value of 13, making them the highest Card");
    System.out.println("good luck, and have fun! -Kurt");
    }//GEN-LAST:event_rulesButtonActionPerformed

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
     if (neiCheatDetect==false){
        if (higherBox.contains(neimayerCard.getOver()-neimayerCard.getImage().getWidth()/2, neimayerCard.getDown()-neimayerCard.getImage().getHeight()/2)){
            
            if (higherBox.contains(neimayerCard.getOver()+neimayerCard.getImage().getWidth()/2,neimayerCard.getDown()+neimayerCard.getImage().getHeight()/2)){
               
              neiCheatDetect = true;
              neiHigherChosen = true;
              neimayerCard2.setFaceDown(false);
            }
          
        }
        if (lowerBox.contains(neimayerCard.getOver()-neimayerCard.getImage().getWidth()/2, neimayerCard.getDown()-neimayerCard.getImage().getHeight()/2)){
            if (lowerBox.contains(neimayerCard.getOver()+neimayerCard.getImage().getWidth()/2,neimayerCard.getDown()+neimayerCard.getImage().getHeight()/2)){
                
                neiCheatDetect = true;
                neiLowerChosen = true;
                neimayerCard2.setFaceDown(false);
            }
        } 
        }   // TODO add your handling code here:
        repaint();
    }//GEN-LAST:event_confirmButtonActionPerformed

    private void getResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getResultsButtonActionPerformed
    if (neiCheatDetect2 == false){    
        if (neiHigherChosen == true){
            
            
            if (neimayerCard.getValue()-neimayerCard2.getValue()>=1){
                neimayerCorrectGuesses++;
                neiCheatDetect2 = true;
                neiCheatDetect3 = false;
                System.out.println("Your Card was Higher, which you selected, reset for new cards");
            }
            if (neimayerCard2.getValue()-neimayerCard.getValue()>=1){
                neimayerCorrectGuesses=0;
                neiCheatDetect3 = false;
                neiCheatDetect2 = true;
                
                System.out.println("Your Card was Lower, but you Chose higher, reset for new cards");
            }
            if (neimayerCard2.getValue()-neimayerCard.getValue()==0){
                neiCheatDetect3 = false;
                neiCheatDetect2 = true;
                
                System.out.println("Your Card was Equal to the Face Down Card, you will not be pnalizer and you will not gain a point, reset for new cards");
            }
        }
        if (neiLowerChosen == true){
            if (neimayerCard.getValue()-neimayerCard2.getValue()>=1){
                neimayerCorrectGuesses=0;
                neiCheatDetect2 = true;
                neiCheatDetect3 = false;
                System.out.println("Your Card was Higher, but you said Lower, reset for new cards");
            }
            if (neimayerCard.getValue()-neimayerCard2.getValue()<=-1){
                neimayerCorrectGuesses++;
                neiCheatDetect2 = true;
                neiCheatDetect3 = false;
                System.out.println("Your Card was Lower, which you selected, reset for new cards");
            }
            if (neimayerCard2.getValue()-neimayerCard.getValue()==0){
                neiCheatDetect3 = false;
                neiCheatDetect2 = true;
                System.out.println("Your Card was Equal to the Face Down Card, you will not be pnalizer and you will not gain a point, reset for new cards");
        }
    }
}
        repaint();
    }//GEN-LAST:event_getResultsButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed

    neimayerCard2.setFaceDown(true);
    neiCheatDetect = false;
    neiCheatDetect2 = false;
    int randomCardIndex = Utility.getRandomFromTo(0, 51);
    int randomCardIndex2 = Utility.getRandomFromTo(0, 51);
    neiCardData1 = neimayerMultiCard.getCardAtIndex(randomCardIndex);
    neiCardData2 = neimayerMultiCard.getCardAtIndex(randomCardIndex2);
    neimayerCard = new NeiCard(neiCardData1,getImage("src/cards/"+"faceDown"+".gif"),this);
    neimayerCard2 = new NeiCard(neiCardData2,getImage("src/cards/"+"faceDown"+".gif"),this);
    neimayerCard2.setFaceDown(true);
    neimayerCard.setOver(185);
    neimayerCard.setDown(170);
    neimayerCard2.setOver(185);
    neimayerCard2.setDown(50);
    neiHigherChosen = false;
    neiLowerChosen = false;
    if (neiWin=false){
        if (neiCheatDetect3 == true){
            neimayerCorrectGuesses = 0;    
        }
    }
    correctGuessLabel.setText("Correct Guesses = "+neimayerCorrectGuesses);
    neiCheatDetect3 = true;
    
    if (neimayerCorrectGuesses ==3){
        neiWin = true;
    }
    repaint();        // TODO add your handling code here:
    }//GEN-LAST:event_resetButtonActionPerformed

 

    @Override
    public void mousePressed(MouseEvent e) {
    //  System.out.println("mousePressed at "+e.getX()+", "+e.getY());
        
        int x = e.getX();
        int y = e.getY();
        if (neiCheatDetect == false){
            
        
        
        if (neimayerCard.contains(x, y))
        {
            neiDragging = true;
        }else
        {
            neiDragging = false;
        }
        repaint();
        }
    }

  @Override
    public void mouseClicked(MouseEvent e) {
        
        int x = e.getX();
        int y = e.getY();
             
    }

    @Override
    public void mouseReleased(MouseEvent e) {
          
    }

    @Override
    public void mouseEntered(MouseEvent e) {
     //   System.out.println("mouseEntered at "+e.getX()+", "+e.getY());
    }

    @Override
    public void mouseExited(MouseEvent e) {
       // System.out.println("mouseExited at "+e.getX()+", "+e.getY());
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        int x = e.getX();
        int y = e.getY();
     //   System.out.println("mouseDragged at "+x+", "+y);

        
//        //now we will adjust the location of the movableThing so that it is
//        //centered on the tip of the mousepointer

if (neiCheatDetect == false){
        if (neiDragging)
        {
            neimayerCard.setOver(x);
            neimayerCard.setDown(y);
            
            
        }
        
        repaint();
    }
    }

    @Override
    public void mouseMoved(MouseEvent e) {
      //  System.out.println("mouseMoved at "+e.getX()+", "+e.getY());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton confirmButton;
    private javax.swing.JLabel correctGuessLabel;
    private javax.swing.JButton getResultsButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton rulesButton;
    // End of variables declaration//GEN-END:variables
}
