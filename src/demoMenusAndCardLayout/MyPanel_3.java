// Jim Klayder --- February 2018

//model card game

/* This game Panel meets the basic requirements of the card game project description
that is found at:

http://raider.mountunion.edu/csc/CSC220/Spring2018/Projects/cardGames/index.html

When the "new game" button is clicked, a random new group of cards are selected
and displayed. If the user clicks on all of the red cards, then the game
is won.

*/

package demoMenusAndCardLayout;

import helperCards.*;
import helpers.Utility;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;

/**
 *
 * @author klaydejr
 */
public class MyPanel_3 extends javax.swing.JPanel  implements MouseListener, MouseMotionListener {

    private final int NUMBER_OF_CARDS_IN_GAME = 5;
    
    private Font myFont;
    private boolean showRules;
    
    private MultiCard fullDeck;
    private ArrayList < MyPanel_3_Card > currentList;
    
    /**
     * Creates new form MyPanel_1
     */
    public MyPanel_3() {
        initComponents();
        
        myFont = new Font("Serif", Font.BOLD, 22);
        showRules = true;
        
        fullDeck = new MultiCard();
        
        addMouseListener(this);
        addMouseMotionListener(this);
        
    }
    
    private void checkForGameOver(Graphics g)
    {
        //if there are no red cards, then the game is over.
        
        //we will assume that the game is over, then look through 
        //all of the cards in currentList
        
        //if we happen to find any red cards then we know that
        //the game is not over
        
        boolean gameOver = true;
        for (int i = 0; i < currentList.size(); i++) 
        {
            if (currentList.get(i).isRed())
            {
                gameOver = false;
            }
        }
        
        if (gameOver)
        {
            g.drawString("Congratulations !", 150, 240);
            g.drawString("You eliminated all of the red cards.", 50, 300);
        }
    }
    
    @Override
    public void paintComponent(Graphics g) 
    {
        super.paintComponent(g);
        
        g.setColor(new Color(200,200,255));
        g.fillRect(0, 0, 1000, 1000);
        g.setFont(myFont);
        
        if (showRules)
        {
            g.setColor(Color.BLACK);
            g.drawString("Click All Red Cards", 50, 50);
            
            g.drawString("After you start a 'new game', click on all", 50, 150);
            g.drawString("of the red cards to make them disappear.", 50, 200);
        }else
        {
            g.setColor(Color.RED);
            //g.drawString("new game started", 50, 300);
            
            for (int i = 0; i < currentList.size(); i++) 
            {
                currentList.get(i).drawCard(g, this);
            }
            
            checkForGameOver(g);
        }
        
        
    }
    
    public void startNewGame()
    {
        currentList = new ArrayList < MyPanel_3_Card > ();
        
        for (int i = 0; i < NUMBER_OF_CARDS_IN_GAME; i++) 
        {
            int randomNum = Utility.getRandomFromTo(0, 51);
            Card randomCard = fullDeck.getCardAtIndex(randomNum);
            MyPanel_3_Card myPanel_3_Card = new MyPanel_3_Card(randomCard);
            myPanel_3_Card.setOver(50 + i * 80);
            myPanel_3_Card.setDown(100);
            
            //System.out.println("randomCard.toString()   "+randomCard.toString()+"     "+randomCard.getOver()+", "+randomCard.getDown());
            
            currentList.add(myPanel_3_Card);
        }
        
        //for debugging
        System.out.println("       here is currentList");
        for (int i = 0; i < currentList.size(); i++) 
        {
            MyPanel_3_Card temp = currentList.get(i);
            System.out.println("temp.toString()   "+temp.toString()+"     "+temp.getOver()+", "+temp.getDown());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        showRulesButton = new javax.swing.JButton();
        newGameButton = new javax.swing.JButton();

        showRulesButton.setText("show rules");
        showRulesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showRulesButtonActionPerformed(evt);
            }
        });

        newGameButton.setText("new game");
        newGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(393, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newGameButton)
                    .addComponent(showRulesButton))
                .addGap(36, 36, 36))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(showRulesButton)
                .addGap(18, 18, 18)
                .addComponent(newGameButton)
                .addContainerGap(283, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void showRulesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showRulesButtonActionPerformed
        System.out.println("showRulesButtonActionPerformed");
        showRules = true;
        repaint();
    }//GEN-LAST:event_showRulesButtonActionPerformed

    private void newGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameButtonActionPerformed
        System.out.println("newGameButtonActionPerformed");
        startNewGame();
        showRules = false;
        repaint();
    }//GEN-LAST:event_newGameButtonActionPerformed

    @Override
    public void mouseClicked(MouseEvent e) {
        System.out.println("mouseClicked at "+e.getX()+" "+e.getY());
        
        if (showRules == false)
        {
            for (int i = 0; i < currentList.size(); i++) 
            {
                MyPanel_3_Card myPanel_3_Card = currentList.get(i);
                if (myPanel_3_Card.containsMousePoint(e.getX(), e.getY()))
                {
                    System.out.println("    just clicked on "+myPanel_3_Card.toString());
                    
                    if (myPanel_3_Card.isRed())
                    {
                        currentList.remove(i);
                    }
                }
                
            }
            repaint();
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
        
    }
    

    @Override
    public void mouseReleased(MouseEvent e) {
           
    }

    @Override
    public void mouseEntered(MouseEvent e) {
           
    }

    @Override
    public void mouseExited(MouseEvent e) {
           
    }

    @Override
    public void mouseDragged(MouseEvent e) {
           
    }

    @Override
    public void mouseMoved(MouseEvent e) {
           
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton newGameButton;
    private javax.swing.JButton showRulesButton;
    // End of variables declaration//GEN-END:variables
}
