/*
Name:Jacob Sanford
Date: 2/27/18
Class: CSC220 Spring 2018
Description: This game is a card game that deals with matching as many cards as possible.
    Clicking the right card gives you a point, while the other removes a point. The games last for 90 seconds.
Enhancement: Usage of a Thread in stuSanford.SanfordClock.java
*/
package stuSanford;
import stuSanford.card.SanfordDeck;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import stuSanford.card.SanfordCard;
import stuSanford.card.SanfordMultiCard;

/**
 *
 * @author klaydejr
 */
public class SanfordPanel extends javax.swing.JPanel implements MouseListener, MouseMotionListener{
    private SanfordDeck deck;
    private SanfordCard card;
    private SanfordMultiCard multiCard;
    private SanfordClock clock;
    private Boolean inGame, firstGame;
    
    public SanfordPanel() {
        initComponents();
        multiCard = new SanfordMultiCard();
        card = multiCard.getSanfordCard();
        deck = new SanfordDeck(this);
        clock = new SanfordClock(this);
        inGame = false;
        firstGame = true;
        addMouseListener(this);
        addMouseMotionListener(this);
    }
    /**
    Allows Clock.java to call repaint within its method
    */
    public void callRepaint(){
        repaint();
    }
    /**
     * sets inGame
     * @param ingame 
     */
    public void setInGame(Boolean ingame){
        inGame = ingame;
    }
    @Override
    public void paintComponent(Graphics g) 
    {
        super.paintComponent(g);
        g.setFont(new Font("TimesRoman", Font.PLAIN, 30));
        if(inGame == true){
            g.setColor(Color.BLUE);
            deck.drawCards(g, this);
            g.setColor(Color.BLUE);
            g.drawString(clock.getTime(), 20, 40);
            g.drawString("Current Score: " + deck.getScore(), 120, 40);
        }
        else{
            g.setColor(Color.RED);
            g.fillRect(0, 0, 500, 500);
            g.setColor(Color.BLACK);
            g.setFont(new Font("TimesRoman", Font.PLAIN, 15));
            g.drawString("Click the card that matches the blue background card.", 30, 35);
            g.drawString("Clicking the right card give you a point, clicking",30, 55);
            g.drawString( "the wrong card will take away a point. You have 90", 30, 75);
            g.drawString( "seconds to click as many correct cards as possible", 30, 95);
            g.drawString( "Click to start", 30, 135);
            if(firstGame == false){
                g.drawString( "Last Sessions Score:" + deck.getScore(),30,175);
            }
            else{
                g.drawString("Good Luck!", 30, 175);
            }
        }   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void mouseClicked(MouseEvent me) {
        int xCord = me.getX();
        int yCord = me.getY();
        if(inGame == false){
            clock.start();
            System.out.println("stuSanford.SanfordPanel.java: Game Started");
            deck.setScore(0);
            clock.resetTime();
            inGame = true; 
        }
        else if (inGame == true){
            deck.checkIfCardMatch(xCord, yCord);
        }
        firstGame = false;
    }
    //Other methods are implemented but unused
    @Override
    public void mousePressed(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseReleased(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseEntered(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseExited(MouseEvent me) {
        //hrow new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseDragged(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseMoved(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
